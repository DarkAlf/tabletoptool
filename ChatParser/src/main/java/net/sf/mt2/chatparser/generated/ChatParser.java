/* ChatParser.java */
/* Generated By:JavaCC: Do not edit this line. ChatParser.java */
        package net.sf.mt2.chatparser.generated;

        import java.util.List;
        import java.util.LinkedList;
        import net.sf.mt2.chatparser.ChatPart;
        import net.sf.mt2.chatparser.DiceExpressionPart;
        import net.sf.mt2.chatparser.TextPart;
        import net.sf.mt2.chatparser.ChatCommand;
        import net.sf.mt2.chatparser.UnknownCommandException;
        import net.sf.mt2.chatparser.ChatCommandPart;
        import net.sf.mt2.dice.*;
        import net.sf.mt2.dice.expression.*;
        import java.io.BufferedReader;
        import java.io.StringReader;
        import java.util.Collections;

        public class ChatParser implements ChatParserConstants {

                private String inputString;

                public ChatParser(String str) {
                        this(new BufferedReader(new StringReader(str)));
                        this.inputString=str;
                }

                public List<? extends ChatPart> parse() throws UnknownCommandException {
                        try {
                                return START();
                        } catch(ParseException e) {
                                e.printStackTrace();
                                return Collections.singletonList(new TextPart(inputString));
                        }
                }

  final private List<ChatPart> START() throws ParseException, UnknownCommandException {LinkedList<ChatPart> list=new LinkedList<ChatPart>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHAT_COMMAND_SLASH:{
      jj_consume_token(CHAT_COMMAND_SLASH);
ChatCommand cc;
      cc = CHAT_COMMAND();
list.add(new ChatCommandPart(cc));
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 0:{
        jj_consume_token(0);
        break;
        }
      case TEXT:{
Token t;
        t = jj_consume_token(TEXT);
if(!" ".equals(t.image))
                                                        list.add(new TextPart(t.image));
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CODE_START:
      case TEXT:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CODE_START:{
        jj_consume_token(CODE_START);
list.add(new DiceExpressionPart(DICE_EXPRESSION()));
        jj_consume_token(CODE_END);
        break;
        }
      case TEXT:{
Token t;
        t = jj_consume_token(TEXT);
if(!list.isEmpty() && list.getLast() instanceof TextPart)
                                        ((TextPart)list.getLast()).append(t.image);
                                else
                                        list.add(new TextPart(t.image));
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
{if ("" != null) return list;}
    throw new Error("Missing return statement in function");
  }

  final private ChatCommand CHAT_COMMAND() throws ParseException, UnknownCommandException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MACRO_EXEC:{
      jj_consume_token(MACRO_EXEC);
{if ("" != null) return ChatCommand.MACRO_EXEC;}
      break;
      }
    case CLEAR_CHAT:{
      jj_consume_token(CLEAR_CHAT);
{if ("" != null) return ChatCommand.CLEAR_CHAT;}
      break;
      }
    case EMIT:{
      jj_consume_token(EMIT);
{if ("" != null) return ChatCommand.EMIT;}
      break;
      }
    case EMOTE:{
      jj_consume_token(EMOTE);
{if ("" != null) return ChatCommand.EMOTE;}
      break;
      }
    case GM:{
      jj_consume_token(GM);
{if ("" != null) return ChatCommand.GM;}
      break;
      }
    case GOTO:{
      jj_consume_token(GOTO);
{if ("" != null) return ChatCommand.GOTO;}
      break;
      }
    case IMPERSONATE:{
      jj_consume_token(IMPERSONATE);
{if ("" != null) return ChatCommand.IMPERSONATE;}
      break;
      }
    case OOC:{
      jj_consume_token(OOC);
{if ("" != null) return ChatCommand.OOC;}
      break;
      }
    case REPLY:{
      jj_consume_token(REPLY);
{if ("" != null) return ChatCommand.REPLY;}
      break;
      }
    case ROLL:{
      jj_consume_token(ROLL);
{if ("" != null) return ChatCommand.ROLL;}
      break;
      }
    case ROLL_GM:{
      jj_consume_token(ROLL_GM);
{if ("" != null) return ChatCommand.ROLL_GM;}
      break;
      }
    case ROLL_ME:{
      jj_consume_token(ROLL_ME);
{if ("" != null) return ChatCommand.ROLL_ME;}
      break;
      }
    case ROLL_SECRET:{
      jj_consume_token(ROLL_SECRET);
{if ("" != null) return ChatCommand.ROLL_SECRET;}
      break;
      }
    case SELF:{
      jj_consume_token(SELF);
{if ("" != null) return ChatCommand.SELF;}
      break;
      }
    case TABLE:{
      jj_consume_token(TABLE);
{if ("" != null) return ChatCommand.TABLE;}
      break;
      }
    case TOKEN_MACRO:{
      jj_consume_token(TOKEN_MACRO);
{if ("" != null) return ChatCommand.TOKEN_MACRO;}
      break;
      }
    case TOKEN_SPEECH:{
      jj_consume_token(TOKEN_SPEECH);
{if ("" != null) return ChatCommand.TOKEN_SPEECH;}
      break;
      }
    case WHISPER:{
      jj_consume_token(WHISPER);
{if ("" != null) return ChatCommand.WHISPER;}
      break;
      }
    case UNKNOWN_COMMAND:{
StringBuilder sb=new StringBuilder();
      label_2:
      while (true) {
Token t;
        t = jj_consume_token(UNKNOWN_COMMAND);
sb.append(t.image);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case UNKNOWN_COMMAND:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_2;
        }
      }
{if (true) throw new UnknownCommandException(sb.toString());}
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private DiceExpression DICE_EXPRESSION() throws ParseException {
DiceExpression first=TERM();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PLUS:
    case MINUS:{
AdditionNode a=new AdditionNode(first);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:{
          jj_consume_token(PLUS);
a.add(TERM());
          break;
          }
        case MINUS:{
          jj_consume_token(MINUS);
a.subtract(TERM());
          break;
          }
        default:
          jj_la1[6] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:{
          ;
          break;
          }
        default:
          jj_la1[7] = jj_gen;
          break label_3;
        }
      }
{if ("" != null) return a;}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
{if ("" != null) return first;}
    throw new Error("Missing return statement in function");
  }

  final private DiceExpression TERM() throws ParseException {
DiceExpression first=PRIMARY();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MULTIPLICATION:
    case DIVISION:{
MultiplicationNode a=new MultiplicationNode(first);
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTIPLICATION:{
          jj_consume_token(MULTIPLICATION);
a.multiplyBy(PRIMARY());
          break;
          }
        case DIVISION:{
          jj_consume_token(DIVISION);
a.divideBy(PRIMARY());
          break;
          }
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case MULTIPLICATION:
        case DIVISION:{
          ;
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          break label_4;
        }
      }
{if ("" != null) return a;}
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
{if ("" != null) return first;}
    throw new Error("Missing return statement in function");
  }

  final private DiceExpression PRIMARY() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
int number;
      number = NUMBER();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DICE_D:
      case DICE_FUDGE:
      case DICE_UBIQUITY:
      case DICE_SHADOWRUN_EXPLODING_GREMLIN:
      case DICE_SHADOWRUN_EXPLODING:
      case DICE_SHADOWRUN_GREMLIN:
      case DICE_SHADOWRUN:{
Dice d;
        d = DICE(number);
{if ("" != null) return new DiceNode(d);}
        break;
        }
      default:
        jj_la1[12] = jj_gen;
{if ("" != null) return new NumberNode(number);}
      }
      break;
      }
    case PARANTHESES_LEFT:{
DiceExpression de;
      jj_consume_token(PARANTHESES_LEFT);
      de = DICE_EXPRESSION();
      jj_consume_token(PARANTHESES_RIGHT);
{if ("" != null) return de;}
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
{if ("" != null) return new NegationNode(PRIMARY());}
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private Dice DICE(int count) throws ParseException {int type;
                int extra;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DICE_FUDGE:
    case DICE_UBIQUITY:
    case DICE_SHADOWRUN_EXPLODING_GREMLIN:
    case DICE_SHADOWRUN_EXPLODING:
    case DICE_SHADOWRUN_GREMLIN:
    case DICE_SHADOWRUN:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DICE_FUDGE:{
        jj_consume_token(DICE_FUDGE);
{if ("" != null) return new FudgeDice(count);}
        break;
        }
      case DICE_UBIQUITY:{
        jj_consume_token(DICE_UBIQUITY);
{if ("" != null) return new UbiquityDice(count);}
        break;
        }
      case DICE_SHADOWRUN:{
        jj_consume_token(DICE_SHADOWRUN);
{if ("" != null) return new ShadowrunBasicDice(count);}
        break;
        }
      case DICE_SHADOWRUN_EXPLODING:{
        jj_consume_token(DICE_SHADOWRUN_EXPLODING);
{if ("" != null) return new ExplodingShadowrunBasicDice(count);}
        break;
        }
      case DICE_SHADOWRUN_GREMLIN:{
        jj_consume_token(DICE_SHADOWRUN_GREMLIN);
        extra = NUMBER();
{if ("" != null) return new ShadowrunGremlinDice(count,extra);}
        break;
        }
      case DICE_SHADOWRUN_EXPLODING_GREMLIN:{
        jj_consume_token(DICE_SHADOWRUN_EXPLODING_GREMLIN);
        extra = NUMBER();
{if ("" != null) return new ExplodingShadowrunGremlinDice(count,extra);}
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case DICE_D:{
      jj_consume_token(DICE_D);
      type = NUMBER();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DICE_D:
      case DICE_KEEP:
      case DICE_REROLL:
      case DICE_SUCCESS:
      case DICE_EXPLODING_SUCCESS:
      case DICE_EXPLODING:
      case DICE_OPEN:
      case DICE_HERO_STUN:
      case DICE_HERO_BODY:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DICE_D:{
          jj_consume_token(DICE_D);
          extra = NUMBER();
{if ("" != null) return new DropDice(count,type,extra);}
          break;
          }
        case DICE_KEEP:{
          jj_consume_token(DICE_KEEP);
          extra = NUMBER();
{if ("" != null) return new KeepDice(count,type,extra);}
          break;
          }
        case DICE_REROLL:{
          jj_consume_token(DICE_REROLL);
          extra = NUMBER();
{if ("" != null) return new RerollDice(count,type,extra);}
          break;
          }
        case DICE_SUCCESS:{
          jj_consume_token(DICE_SUCCESS);
          extra = NUMBER();
{if ("" != null) return new SuccessDice(count,type,extra);}
          break;
          }
        case DICE_EXPLODING_SUCCESS:{
          jj_consume_token(DICE_EXPLODING_SUCCESS);
          extra = NUMBER();
{if ("" != null) return new ExplodingSuccessDice(count,type,extra);}
          break;
          }
        case DICE_EXPLODING:{
          jj_consume_token(DICE_EXPLODING);
{if ("" != null) return new ExplodingDice(count,type);}
          break;
          }
        case DICE_OPEN:{
          jj_consume_token(DICE_OPEN);
{if ("" != null) return new OpenDice(count,type);}
          break;
          }
        case DICE_HERO_STUN:{
          jj_consume_token(DICE_HERO_STUN);
{if ("" != null) return new HeroStunDice(count,type);}
          break;
          }
        case DICE_HERO_BODY:{
          jj_consume_token(DICE_HERO_BODY);
{if ("" != null) return new HeroBodyDice(count,type);}
          break;
          }
        default:
          jj_la1[15] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
{if ("" != null) return new SimpleDice(count,type);}
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final private int NUMBER() throws ParseException {Token number;
    number = jj_consume_token(NUMBER);
{if ("" != null) return Integer.parseInt(number.image);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ChatParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x400001,0x100000,0x600000,0x600000,0x80000,0xffffe,0x3000000,0x3000000,0x3000000,0xc000000,0xc000000,0xc000000,0x80000000,0x52000000,0x0,0x80000000,0x80000000,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3f00,0x0,0x3f00,0xff,0xff,0x3f00,};
   }

  /** Constructor with InputStream. */
  public ChatParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ChatParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ChatParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ChatParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ChatParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ChatParser(ChatParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ChatParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[46];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 46; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

        }
